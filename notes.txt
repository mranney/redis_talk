Asynchronous Fun With Node.js and Redis

I have a server and networking background, so I've only come to JavaScript recently.
If you already know JavaScript from doing front end development, you probably already know the hard parts about
   working with node.
Node has only non-blocking I/O, which is good.
JS in browser is only non-blocking as well.
Node opens up a whole new world of things you can talk non-blockingly to, databases, file systems, child processes, etc.
I'm going to show you some examples of how you can use JavaScript, node, and Redis to do interesting things.
These are just simple examples, but I hope they'll inspire you to go and make things of your own.
And it's really fun, because these are awesome technologies.


JavaScript is great.


Node is great.


Redis is great.


Redis

Data structure server, whatever that means.
Database?  more or less.
Key-value store?  sure.
noSQL?  Why not.
A better memcached?  Is Linux better than OSX?

Mostly in-memory database.
Rather fast.


Redis Interface

TCP connection
Custom protocol that seems easy to parse.
CLI available.  <<show quick example>>
Real work is done through client libraries.
Client libraries like node_redis.


node_redis

I wrote a Redis library for node, called "node_redis".
If you have node and npm installed, you can install it with: npm install redis


Simple Example

Get a value and increment a counter.
We get the expected result, but things are happening very asynchronously.
Why doesn't it quit?
<<example1.js>>


Web Server

You probably don't want to use node's low level HTTP interface.
But you should know how it works.
Everybody writes a web framework, and you can too.
<<example2.js>>
It generates a web page from data it pulls from Redis.
In many ways, Redis is a lot like node.  Single thread, has data structures, high concurrent load.
Just data ops, hardly any logic.
Can access huge amounts of memory, no GC.


Loading Data

Here's how I put the data into Redis
<<load_data.js>>
Note that I cheated by assuming the files would read in order.


Publish / Subscribe

Producers and consumers can use Redis protocol
Seems like an odd feature to put in a database
But its really useful
<<example3.js>>


Realtime Analytics

A lot of people use Redis for realtime stats.
<<example4.js>>
<<log_viewer2.js>>
To make things more interesting and to show off node, start 1000 web servers.


Message Queue

Blocking pop operation lets multiple consumers supply data to multiple consumers.
<<queue_server.js>>


If we have enough time, then do:

node_pcap

